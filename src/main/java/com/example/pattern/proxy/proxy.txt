问题:  代理类是如何创建的?代理目标是谁?

静态代理:
        代理类自己手工实现的,代理目标是确定的

动态代理:
        在程序执行过程中,使用JDK的反射机制来创建代理类对象,并动态指定代理目标类

        JDK动态代理: 使用Java反射包中的类和接口实现动态代理的功能
                    反射包java.lang.reflect ---> InvocationHandler,Method,Proxy
                    要求: 目标类必须有接口
                    InvocationHandler 接口:就一个方法 invoke(): 表示代理对象要执行的功能代码
                                           即代理类完成的功能
                                      public Object invoke(Object proxy, Method method, Object[] args)
                                      其中: Object proxy : jdk创建的代理对象,
                                           Method method: 目标类中的方法,jdk提供Method对象
                                           Object[] args: 目标类中的方法的参数
                    Method类: 确切的说是目标类中的方法对象,即执行目标类中的某个方法,Method.invoke();
                                                                      方法名巧好一样而已;
                    Proxy: 核心的对象,即代理对象,使用Proxy类的方法,创建代理对象
                           静态方法:  newProxyInstance();
                           public static Object newProxyInstance(ClassLoader loader,
                                                                     Class<?>[] interfaces,
                                                                     InvocationHandler h)
                           参数说明:
                           1. ClassLoader loader: 类加载器,负责向内存中加载对象的,使用反射获取对象的ClassLoader
                                        目标对象的类加载器: a.getClass().getClassLoader()
                           2.Class<?>[] interfaces: 接口,目标对象实现的接口,也是反射获取的
                           3.InvocationHandler h: 自己写的,代理类要完成的功能
                           4.Object: 返回值就是代理对象

        CGLIB动态代理: 第三方工具库,创建代理对象;
                  原理是通过继承目标类,创建他的子类,在子类中重写父类中同名的方法,实现功能的修改
                       所以要求目标类不能是final的,方法也不能是final的,
                          目标类的要求比较宽松,只要能继承就可以了,很多框架中都有使用,如: spring,mybatis

代理模式:
       1.作用
             功能增强
             控制访问