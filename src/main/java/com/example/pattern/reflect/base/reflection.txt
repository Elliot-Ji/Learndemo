反射学习:
       1. 反射机制允许程序在执行期借助Reflection API取得任何类的内部信息(比如成员变量,构造器,成员方法等等),
          并能操作对象的属性及方法.反射在设计模式和框架底层都会用到;

       2. 加载完类之后,在堆中就产生一个Class类型的对象(一个类只有一个Class对象),这个对象包含了类的完整结构信息.
          通过这个对象得到类的结构,这个对象就像一面镜子,透过这个镜子看到类的结构,所以形象的称之为反射;

       编译阶段
            |
          Cat.java --> Cat.class
       Class类加载阶段
            |
          通过类加载器ClassLoader生成了Class类对象
          Cat.class的 Class类对象(一个类对应一个Class类对象,且唯一)/存放在堆中
                      其中,成员变量,构造器,成员方法都当成对象存在,
       Runtime运行阶段
            |
          new Cat()
          Cat对象存放在堆中,且该对象知道它是属于哪个Class对象
          当我们得到该Class类对象时,可以做很多工作:
              如: 创建对象,调用方法,操作属性等

       3.反射的访问检查,Field,Method,Constructor都有
             Method method = cls.getMethod("dd")
             method.setAccessible(true);

       4.Class类
           1.查看Class类图,Class类也是类,因此也继承了Object类
           2.Class类对象是如何创建的? -->系统创建出来的,而不是new出来的, ClassLoader.loadClass("全类名")
           3.对于某个类的Class类对象,在内存中只有一份,因为类只加载一次
           4.每个类的实例都会记得自己是由哪个Class实例所生成的
           5.通过Class对象可以完整的得到一个类的完整结构,通过一系列的API,常用方法
           6.Class对象是存放在堆中的
           7.类的字节码二进制数据,是放在方法区的,有的地方称为类的元数据
          哪些类型有Class对象
             1.外部类,成员内部类,静态内部类,局部内部类,匿名内部类
             2.interface:接口
             3.数组
             4.enum:枚举
             5.annotation:注解
             6.基本数据类型
             7.void

       5.类加载
           5.1 基本说明
               反射机制是Java实现动态语言的关键,也就是通过反射实现类动态加载;
               1.静态加载: 编译时加载相关的类
               2.动态加载: 运行时加载需要的类,
               3.类加载时机
                     1).当创建对象时(new) //静态加载
                     2).当子类被加载时 //静态加载
                     3).调用类中的静态成员时 //静态加载
                     4).通过反射  //动态加载
           5.2 类加载过程
                               连接 Linking
              加载       ---->  验证 verification       ----> 初始化
              Loading          准备 Preparation              initialization
                               解析 Resolution

              加载: 将类的class文件(转化为二进制字节流)读入内存中,并为之创建一个java.lang.Class对象,此过程由类加载器完成
              连接: 将类的二进制数据合并到JRE中
                    符合引用->直接引用
              初始化: JVM负责对类进行初始化,这里主要指静态成员(静态变量,静态代码块),且这两者会按照代码顺序合并;

       6.反射相关的API操作
           6.1 获取类结构信息(成员变量,方法,构造器),有公有还是私有之分
           6.2 反射爆破创建实例,操作属性和方法(即如何访问私有的属性,方法,构造器)





























