class文件 --> ClassLoader SubSystem ---->running data area
                                      |
                                   run engine

1.类加载器子系统
   1.1 作用：从文件系统或者网络中加载class文件，class文件在文件开头有特定的文件标识
   1.2 字节码文件--> 类加载子系统 --> 内存 --> 执行引擎
                       |
      加载阶段  ->   链接阶段  ->     初始化阶段
      1.2.1 加载阶段
              通过一个类的全限定名获取定义此类的二进制字节流
              将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构
              在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口
      1.2.2 链接阶段
              验证（Verity）
                  目的：确保Class文件的字节流中包含信息符合当前虚拟机的要求
                  验证：文件格式验证，元数据验证，字节码验证，符号引用验证
              准备（Prepare）
                  为类变量分配内存并且设置改类变量的默认初始值，即零值。
                  这里不包含用final修改的static，因为final在编译的时候就会分配了，准备阶段会显示初始化
                  这里不会实例变量分配初始化，类变量会分配在方法区中，而实例变量会是随着对象一起分配到java堆中
              解析（Resolve）
                  将常量池内的符号引用转换为直接引用的过程。
                  事实上，解析操作往往会伴随着jvm在执行完初始化之后再执行。
                  解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。   反编译命令： javap -v xx.class
      1.2.3 初始化阶段
              执行类构造器方法<clinit>()的过程
              此方法不需要定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。
              构造器方法中指令安语句在源文件中出现的顺序执行。
              <clint>()不同于类的构造器（构造器是虚拟机视角下的<init>()
              若该类具有父类，JVM会保证子类的<clinit>()执行前，父类的<clinit>()已经执行完毕。
              虚拟机必须保证一个类的<clinit>()方法在多线程下被同步加锁

      1.3 类加载器的分类
          引导类加载器（Bootstrap Class Loader）和 自定义类加载器(User-Defined Class Loader)
                                                    扩展类加载器（Extension Class Loader）
                                                    系统类加载器（System Class Loader）
                 这几者之间不是继承关系
                 java核心类库都是使用引导类加载器加载的,由C/C++语言实现的
                 扩展类加载器是Java语言编写，主要加载jre/lib/ext子目录下类库
                 系统类加载器是Java语言编写，程序中默认的类加载器
2.双亲委派机制
   Java虚拟机对class文件采用的是按需加载的方式，即当需要使用该类时才会将他的class文件加载到内存生成Class对象。而加载某个类的class
   文件时，java虚拟机采用的是双亲委派模式，即把请求交由父类处理，是一种任务委派模式。
   工作原理： 即一个类加载器收到了类加载请求，会把这个请求委托给父类，如果这个父类还存在父类加载器，则进一步向上委托直至顶层的启动类加载器
            如父类加载器能完成类加载任务，就成功返回，不能则委托给子加载器
   沙箱安全机制？



































