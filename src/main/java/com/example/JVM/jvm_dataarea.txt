运行时数据区：
    （1）以Hotspot 虚拟机为例，内存划分结构：
           方法区（元数据区）   堆     程序计数器   本地方法栈    虚拟机栈
        1.其中jvm虚拟机启动时，开启一个进程，方法区和堆是随着进程的开启而开启，销毁则销毁
                        计数器、本地方法栈、虚拟机栈则是随着线程的开启而开启
                        每个jvm只有一个Runtime实例，即为运行时环境
        2.后台线程主要有：
             虚拟机线程
             周期任务线程
             GC线程
             编译线程
             信号调度线程
        3.栈顶缓存技术
            基于栈式架构的虚拟机所使用的的零地址指令更加紧凑，但完成一项操作的时候必须需要使用更多的入栈和出栈指令，这同时也就意味着将需要
               更多的指令分派次数和内存读写次数；
            由于操作数是存储在内存中的，因此频繁执行内存读写操作必然会影响执行速度。为解决这个问题从而提出了栈顶缓存技术，将栈顶元素全部缓存
               在物理CPU的寄存器中，以此降低对内存的读写次数，提升执行引擎的执行效率。
        4.方法的调用
            在jvm中，将符号引用转换为调用方法的直接引用与方法的绑定机制相关；
            静态链接-->早期绑定：  编译期可知，且运行期保持不变
            动态链接-->晚期绑定：  编译期不可知，运行期才可知
                虚方法：对应晚期绑定
                非虚方法：对应早期绑定，如静态方法、私有方法、final方法、实例构造器、父类方法，其他方法称为虚方法；
            虚拟机提供了以下几条方法调用指令：
                普通调用指令：
                   invokestatic: 调用静态方法，解析阶段确定唯一方法版本
                   invokespecial: 调用<init>方法、私有及父类方法，解析阶段确定唯一方法版本
                   invokevirtual: 调用所有虚方法
                   invokeinterface: 调用接口方法
                动态调用指令：
                   invokedynamic: 动态解析出需要调用的方法，然后执行；
                前四条指令固化在虚拟机内部，方法的调用执行不可人为干预
    （2）内存结构如下：
        （1）PC寄存器（程序计数器）
            1.1 作用： 存储指向下一条指令的地址，也即将要执行的指令代码。由执行引擎读取下一条指令。
                   任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。程序计数器会存储当前线程正在执行的Java方法的jvm指令地址，如果是在
                   执行native方法，则是未指定值。
        （2）虚拟机栈
            2.1 栈是运行时的单位，堆是存储的单位（整个内存空间中可以看做是最大的一部分区域）
                每个线程在创建时都会创建一个虚拟机栈，其内部保存一个一个的栈帧，对应着一次次java方法调用，是线程私有的；
                一个线程  --> 一个虚拟机栈  -->  多个栈帧，其中
                                                    一个栈帧    -->对应一个java方法
                                                    一个栈帧    -->对应一个java方法
                                                    一个栈帧    -->对应一个java方法
                java栈的大小可以是动态的或者固定不变的
                    出现的异常： 栈溢出异常  StackOverflowError
                               内存溢出异常
                    *设置栈内存大小：*
                        参数： -Xss
            2.2 栈的存储单位----栈帧
                 栈中的数据都是以栈帧的格式存在；
                 在这个线程上正在执行的每个方法都各自对一个栈帧（Stack Frame）；
                 栈帧是一个内存区块，是一个数据集，维系这个方法执行过程中的各种数据信息；
                 JVM直接对java栈的操作只有两个： 压栈和出栈
                 不同的线程所包含的栈帧是不允许存在相互引用的；
            2.3 栈帧的内部结构
                  *局部变量表(Local Variables)
                  *操作数栈(Operand Stack) 或表达式栈
                   动态链接(Dynamic Linking)  或 指向运行时常量池的方法引用
                   方法返回地址(Return Address) 或方法正常退出或异常退出的定义
                   一些附件信息
                  （1）局部变量表(Local Variables)
                       定义为一个数字数组，用于存储方法参数和定义在方法体内的局部变量，数据类型包括基本数据类型，对象引用，returnAddress类型；
                           参数值的存放总是在局部变量数组的index0开始，到数组长度-1的索引结束；
                           局部变量表，最基本的存储单元是Slot（变量槽）；
                           在该表中，32位以内的类型只占用一个slot（包括returnAddress类型），64位的类型（long和double）占用两个slot；
                           如果当前栈帧是有构造方法或者实例方法创建的，那么该对象引用this将会存放在index为0的slot处，其余参数按顺序排列；
                           存在一个局部变量表slot的重复利用情况；
                       该表是建立在线程的栈上，是线程的私有数据，因此不存在数据安全问题；
                       局部变量表所需的容量大小是在编译期确定下来的，并保存在方法的Code属性的maximum local variables数据项中，
                           在方法运行期间是不会改变局部变量表的大小的；

                       java变量的分类？
                       局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的对象都不会被回收；
                  （2）操作数栈
                        在方法执行过程中，根据字节码指令，往栈中写入数据或提取数据，即入栈、出栈
                           某些字节码指令将值压入操作数栈，其余的字节码指令将操作数取出栈，使用它们后再把结果压入栈
                           比如：执行复制、交换、求和等操作
                        主要用于保存计算过程中的中间结果，同时作为计算过程中变量临时的存储空间。
                        操作数栈就是jvm执行引擎的一个工作区，当一个方法刚开始执行的时候，一个新的栈帧也会随之被创建出来，此时这个方法的操作数栈
                           是空的；
                        每一个操作数栈都会拥有一个明确的栈深度用于存储数值，其所需的最大深度在编译期就定义好了，保存在方法的code属性中，max_stack
                        栈中的任何一个元素都是可以任意的java数据类型
                             32bit类型占用一个栈单位深度
                             64bit类型占用两个栈单位深度
                        操作数栈并非采用访问索引的方式来进行数据访问的，而是只能通过标准的入栈、出栈操作来完成一个数据访问；
                        如果被调用的方法有返回值，其返回值将会被压入当前栈帧的操作数栈中，并更新pc寄存器中下一条需要执行的字节码指令；
                        操作数栈中元素的数据类型必须与字节码指令的序列严格匹配，由编译器期间进行验证，同时在类加载过程中的类检验阶段的数据流
                           分析阶段要再次验证；
                        Java虚拟机的解释引擎是基于栈的执行引擎，其中的栈指的就是操作数栈。
                  （3）动态链接 （指向运行时常量池的方法引用）
                        每一个栈帧内部都包含一个指向运行时常量池中该栈帧所属方法的引用。目的就是为了支持当前方法的代码能够实现动态链接、比如
                                   invokedynamic指令
                        在java源文件被编译到字节码文件中时，所有的变量和方法引用都作为符号引用保存在class文件的常量池里。比如描述一个方法调用
                               另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么动态链接的作用就是为了将这些符号引用转换为
                               调用方法的直接引用。


























































